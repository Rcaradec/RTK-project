// The Slice contains everything that is related to the Counter
//     -> Actions
//     -> Reducer
//     -> State

import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the initial state using that type
export interface CounterState {
  value: number;
}

const initialState: CounterState = {
  value: 0,
};

// A Slice takes an object as a parameter
// 1 - it expects a key for the name of the slice
// 2 - it takes the initial State for the slices to start with
// 3 - reducers
const counterSlice = createSlice({
  name: "count",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // extra reducers for async thunks
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, () => {
        console.log("incrementAsync.pending");
      })
      .addCase(
        incrementAsync.fulfilled,
        (state, action: PayloadAction<number>) => {
          state.value += action.payload;
        }
      );
  },
});

// Asynchronous thunk
// With async we have to define the action first, and then the reducers
export const incrementAsync = createAsyncThunk(
  "counter/incrementAsync",
  async (amount: number) => {
    await new Promise((resolve) => {
      setTimeout(resolve, 1000);
    });
    return amount;
  }
);

// Export the actions generated by createSlice
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// Export the reducer to be used in the store
export default counterSlice.reducer;
